<?xml version='1.0' encoding='utf-8' standalone='yes'?>

<instrumentationManifest xmlns="http://schemas.microsoft.com/win/2004/08/events">
  <instrumentation
      xmlns:win="http://manifests.microsoft.com/win/2004/08/windows/events"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <events xmlns="http://schemas.microsoft.com/win/2004/08/events">

      <!-- Warning: GUID must match value from wprp otherwise the events will not be captured -->
      <provider
          guid="{48da0f57-3fd5-4f85-a9c2-7075b268ac3f}"
          name="OrtcServices"
          message="$(string.OrtcServices.ProviderMessage)"
          symbol="ORTC_SERVICES_PROVIDER_GUID"
          messageFileName="services_ETWTracing.dll"
          resourceFileName="services_ETWTracing.dll" >
        <channels>
          <channel chid="os"
                 name="OrtcServices/Debug"
                 type="Debug"
                 symbol="CHANNEL_ORTC_SERVICES_DEBUG"
                 message="$(string.Channel.OrtcServicesDebug)" />
        </channels>
        <tasks>
          <task name="Stun" symbol="TASK_STUN" value="1" message="$(string.Task.Stun)" />
          <task name="StunRequester" symbol="TASK_STUN_REQUESTER" value="2" message="$(string.Task.StunRequester)" />
          <task name="StunRequesterManager" symbol="TASK_STUN_REQUESTER_MANAGER" value="3" message="$(string.Task.StunRequesterManager)">
            <opcodes>
              <opcode name="Exception" symbol="OPCODE_SOCKET_EXCEPTION" value="11" message="$(string.Opcode.Socket.Exception)" />
            </opcodes>
          </task>
          <task name="StunDiscovery" symbol="TASK_STUN_DISCOVERY" value="4" message="$(string.Task.StunDiscovery)">
            <opcodes>
              <opcode name="Event" symbol="OPCODE_TIMER_EVENT" value="11" message="$(string.Opcode.Timer.Event)" />
            </opcodes>
          </task>
          <task name="TurnSocket" symbol="TASK_TURN_SOCKET" value="5" message="$(string.Task.TurnSocket)">
            <opcodes>
              <opcode name="Event" symbol="OPCODE_TIMER_EVENT" value="11" message="$(string.Opcode.Timer.Event)" />
            </opcodes>
          </task>
          <task name="BackOffTimerPattern" symbol="TASK_BACKOFF_TIMER_PATTERN" value="6" message="$(string.Task.BackOffTimerPattern)">
            <opcodes>
              <opcode name="Event" symbol="OPCODE_TIMER_EVENT" value="11" message="$(string.Opcode.Timer.Event)" />
            </opcodes>
          </task>
          <task name="BackOffTimer" symbol="TASK_BACKOFF_TIMER" value="7" message="$(string.Task.BackOffTimer)">
            <opcodes>
              <opcode name="Event" symbol="OPCODE_TIMER_EVENT" value="11" message="$(string.Opcode.Timer.Event)" />
            </opcodes>
          </task>
          <task name="Settings" symbol="TASK_SETTINGS" value="8" message="$(string.Task.Settings)">
            <opcodes>
              <opcode name="Event" symbol="OPCODE_TIMER_EVENT" value="11" message="$(string.Opcode.Timer.Event)" />
            </opcodes>
          </task>
          <task name="Cache" symbol="TASK_CACHE" value="9" message="$(string.Task.Cache)">
            <opcodes>
              <opcode name="Event" symbol="OPCODE_TIMER_EVENT" value="11" message="$(string.Opcode.Timer.Event)" />
            </opcodes>
          </task>
          <task name="Dns" symbol="TASK_DNS" value="4" message="$(string.Task.Dns)">
            <opcodes>
              <opcode name="Event" symbol="OPCODE_TIMER_EVENT" value="11" message="$(string.Opcode.Timer.Event)" />
            </opcodes>
          </task>
          <task name="Http" symbol="TASK_HTTP" value="10" message="$(string.Task.Http)">
            <opcodes>
              <opcode name="Event" symbol="OPCODE_TIMER_EVENT" value="11" message="$(string.Opcode.Timer.Event)" />
            </opcodes>
          </task>
          <task name="DebugLogger" symbol="TASK_DEBUG_LOGGER" value="11" message="$(string.Task.DebugLogger)">
            <opcodes>
              <opcode name="Event" symbol="OPCODE_TIMER_EVENT" value="11" message="$(string.Opcode.Timer.Event)" />
            </opcodes>
          </task>
        </tasks>
        <templates>
          <template tid="T_SocketBasic">
            <data inType="win:AnsiString" name="Method" />
            <data inType="win:UInt64"     name="Socket" />
          </template>
        </templates>
        <events>
          <event symbol="ZsExceptionEventFired" channel="os" template="T_Exception" task="Exception" opcode="Exception" value="1001" level="win:Error" message="$(string.Event.ZsExceptionEventFired)" />
        </events>
      </provider>

    </events>
  </instrumentation>
  <localization>
    <resources culture="en-US">
      <stringTable>
        <string id="OrtcServices.ProviderMessage" value="OrtcServices Provider"/>

        <string id="level.Critical" value="Critical"/>
        <string id="level.Error" value="Error"/>
        <string id="level.Warning" value="Warning"/>
        <string id="level.Informational" value="Informational"/>
        <string id="level.Verbose" value="Verbose"/>

        <string id="Channel.OrtcServicesDebug" value="OrtcServices Debug Channel"/>

        <string id="Task.Stun" value="Stun"/>
        <string id="Task.StunRequester" value="StunRequester"/>
        <string id="Task.StunRequesterManager" value="StunRequesterManager"/>
        <string id="Task.StunDiscovery" value="StunDiscovery"/>
        <string id="Task.TurnSocket" value="TurnSocket"/>
        <string id="Task.BackOffTimerPattern" value="BackOffTimerPattern"/>
        <string id="Task.BackOffTimer" value="BackOffTimer"/>
        <string id="Task.Settings" value="Settings"/>
        <string id="Task.Cache" value="Cache"/>
        <string id="Task.Dns" value="Dns"/>
        <string id="Task.Http" value="Http"/>
        <string id="Task.DebugLogger" value="DebugLogger"/>

        <string id="Opcode.Stun.Exception" value="Exception"/>

        <string id="Event.ZsExceptionEventFired" value="ZsExceptionEventFired"/>

      </stringTable>
    </resources>
  </localization>
</instrumentationManifest>
