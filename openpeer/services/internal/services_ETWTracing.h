//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once
#include <wmistr.h>
#include <evntrace.h>
#include "evntprov.h"
//
//  Initial Defs
//
#if !defined(ETW_INLINE)
#define ETW_INLINE DECLSPEC_NOINLINE __inline
#endif

#if defined(__cplusplus)
extern "C" {
#endif

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION
#if  !defined(McGenDebug)
#define McGenDebug(a,b)
#endif 


#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE            RegistrationHandle;
    TRACEHANDLE            Logger;
    ULONGLONG              MatchAnyKeyword;
    ULONGLONG              MatchAllKeyword;
    ULONG                  Flags;
    ULONG                  IsEnabled;
    UCHAR                  Level; 
    UCHAR                  Reserve;
    USHORT                 EnableBitsCount;
    PULONG                 EnableBitMask;
    const ULONGLONG*       EnableKeyWords;
    const UCHAR*           EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif

#if !defined(MCGEN_LEVEL_KEYWORD_ENABLED_DEF)
#define MCGEN_LEVEL_KEYWORD_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenLevelKeywordEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ UCHAR Level,
    _In_ ULONGLONG Keyword
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((Keyword == (ULONGLONG)0) ||
            ((Keyword & EnableInfo->MatchAnyKeyword) &&
             ((Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {
            return TRUE;
        }
    }

    return FALSE;

}
#endif

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ PCEVENT_DESCRIPTOR EventDescriptor
    )
{

    return McGenLevelKeywordEnabled(EnableInfo, EventDescriptor->Level, EventDescriptor->Keyword);

}
#endif


//
// EnableCheckMacro
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled &&  McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    _In_ LPCGUID SourceId,
    _In_ ULONG ControlCode,
    _In_ UCHAR Level,
    _In_ ULONGLONG MatchAnyKeyword,
    _In_ ULONGLONG MatchAllKeyword,
    _In_opt_ PEVENT_FILTER_DESCRIPTOR FilterData,
    _Inout_opt_ PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Vista.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider. 

    ControlCode - The parameter indicates whether the provider 
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to 
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category 
                      of events that the provider writes. 

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider 
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
    ULONG Ix;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;

            for (Ix = 0; Ix < Ctx->EnableBitsCount; Ix += 1) {
                if (McGenLevelKeywordEnabled(Ctx, Ctx->EnableLevel[Ix], Ctx->EnableKeyWords[Ix]) != FALSE) {
                    Ctx->EnableBitMask[Ix >> 5] |= (1 << (Ix % 32));
                } else {
                    Ctx->EnableBitMask[Ix >> 5] &= ~(1 << (Ix % 32));
                }
            }
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            if (Ctx->EnableBitsCount > 0) {
                RtlZeroMemory(Ctx->EnableBitMask, (((Ctx->EnableBitsCount - 1) / 32) + 1) * sizeof(ULONG));
            }
            break;
 
        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif
   
    return;
}

#endif
#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION
//+
// Provider OrtcServices Event Count 11
//+
EXTERN_C __declspec(selectany) const GUID ORTC_SERVICES_PROVIDER_GUID = {0x48da0f57, 0x3fd5, 0x4f85, {0xa9, 0xc2, 0x70, 0x75, 0xb2, 0x68, 0xac, 0x3f}};

//
// Channel
//
#define CHANNEL_ORTC_SERVICES_DEBUG 0x10

//
// Opcodes
//
#define OPCODE_CANCEL 0x65
#define OPCODE_INTERNAL_EVENT 0x66
#define OPCODE_STUN_REQUESTER_RETRY_NOW 0xb

//
// Tasks
//
#define TASK_STUN 0x1
#define TASK_STUN_REQUESTER 0x2
#define TASK_STUN_REQUESTER_MANAGER 0x3
#define TASK_STUN_DISCOVERY 0x4
#define TASK_TURN_SOCKET 0x5
#define TASK_BACKOFF_TIMER_PATTERN 0x6
#define TASK_BACKOFF_TIMER 0x7
#define TASK_SETTINGS 0x8
#define TASK_CACHE 0x9
#define TASK_DNS 0xa
#define TASK_HTTP 0xb
#define TASK_DEBUG_LOGGER 0xc

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OpServicesStunPacket = {0x3e9, 0x0, 0x10, 0x5, 0x0, 0x1, 0x8000000000000000};
#define OpServicesStunPacket_value 0x3e9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OpServicesStunRequesterCreate = {0x44d, 0x0, 0x10, 0x4, 0x1, 0x2, 0x8000000000000000};
#define OpServicesStunRequesterCreate_value 0x44d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OpServicesStunRequesterDestroy = {0x44e, 0x0, 0x10, 0x4, 0x2, 0x2, 0x8000000000000000};
#define OpServicesStunRequesterDestroy_value 0x44e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OpServicesStunRequesterCancel = {0x44f, 0x0, 0x10, 0x4, 0x2, 0x2, 0x8000000000000000};
#define OpServicesStunRequesterCancel_value 0x44f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OpServicesStunRequesterRetryNow = {0x450, 0x0, 0x10, 0x4, 0xb, 0x2, 0x8000000000000000};
#define OpServicesStunRequesterRetryNow_value 0x450
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OpServicesStunRequesterReceivedStunPacket = {0x451, 0x0, 0x10, 0x4, 0xf0, 0x2, 0x8000000000000000};
#define OpServicesStunRequesterReceivedStunPacket_value 0x451
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OpServicesStunRequesterBackOffTimerStateEventFired = {0x452, 0x0, 0x10, 0x5, 0x66, 0x2, 0x8000000000000000};
#define OpServicesStunRequesterBackOffTimerStateEventFired_value 0x452
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OpServicesStunRequesterSendPacket = {0x453, 0x0, 0x10, 0x4, 0x9, 0x2, 0x8000000000000000};
#define OpServicesStunRequesterSendPacket_value 0x453
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OpServicesStunRequesterManagerCreate = {0x4b1, 0x0, 0x10, 0x4, 0x1, 0x3, 0x8000000000000000};
#define OpServicesStunRequesterManagerCreate_value 0x4b1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OpServicesStunRequesterManagerDestroy = {0x4b2, 0x0, 0x10, 0x4, 0x2, 0x3, 0x8000000000000000};
#define OpServicesStunRequesterManagerDestroy_value 0x4b2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR OpServicesStunRequesterManagerReceivedStunPacket = {0x4b3, 0x0, 0x10, 0x5, 0xf0, 0x3, 0x8000000000000000};
#define OpServicesStunRequesterManagerReceivedStunPacket_value 0x4b3

//
// Note on Generate Code from Manifest Windows Vista and above
//
//Structures :  are handled as a size and pointer pairs. The macro for the event will have an extra 
//parameter for the size in bytes of the structure. Make sure that your structures have no extra padding.
//
//Strings: There are several cases that can be described in the manifest. For array of variable length 
//strings, the generated code will take the count of characters for the whole array as an input parameter. 
//
//SID No support for array of SIDs, the macro will take a pointer to the SID and use appropriate 
//GetLengthSid function to get the length.
//

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Globals 
//


//
// Event Enablement Bits
//

EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG OrtcServicesEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG OrtcServicesKeywords[2] = {0x8000000000000000, 0x8000000000000000};
EXTERN_C __declspec(selectany) const UCHAR OrtcServicesLevels[2] = {5, 4};
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT ORTC_SERVICES_PROVIDER_GUID_Context = {0, 0, 0, 0, 0, 0, 0, 0, 2, OrtcServicesEnableBits, OrtcServicesKeywords, OrtcServicesLevels};

EXTERN_C __declspec(selectany) REGHANDLE OrtcServicesHandle = (REGHANDLE)0;

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister
#pragma warning(push)
#pragma warning(disable:6103)
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function register the provider with ETW USER mode.

Arguments:
    ProviderId - Provider Id to be register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for this provider.

    RegHandle - Pointer to Registration handle.

Remarks:

    If the handle != NULL will return ERROR_SUCCESS

--*/
{
    ULONG Error;


    if (*RegHandle) {
        //
        // already registered
        //
        return ERROR_SUCCESS;
    }

    Error = EventRegister( ProviderId, EnableCallback, CallbackContext, RegHandle); 

    return Error;
}
#pragma warning(pop)


DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW USER mode

Arguments:
            RegHandle this is the pointer to the provider context
Remarks:
            If Provider has not register RegHandle = NULL,
            return ERROR_SUCCESS
--*/
{
    ULONG Error;


    if(!(*RegHandle)) {
        //
        // Provider has not registerd
        //
        return ERROR_SUCCESS;
    }

    Error = EventUnregister(*RegHandle); 
    *RegHandle = (REGHANDLE)0;
    
    return Error;
}
#endif
//
// Register with ETW Vista +
//
#ifndef EventRegisterOrtcServices
#define EventRegisterOrtcServices() McGenEventRegister(&ORTC_SERVICES_PROVIDER_GUID, McGenControlCallbackV2, &ORTC_SERVICES_PROVIDER_GUID_Context, &OrtcServicesHandle) 
#endif

//
// UnRegister with ETW
//
#ifndef EventUnregisterOrtcServices
#define EventUnregisterOrtcServices() McGenEventUnregister(&OrtcServicesHandle) 
#endif

//
// Enablement check macro for OpServicesStunPacket
//

#define EventEnabledOpServicesStunPacket() ((OrtcServicesEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for OpServicesStunPacket
//
#define EventWriteOpServicesStunPacket(Method, Message, Log, ObjectID, StunClass, StunMethod, TotalRetries, ErrorCode, Reason, MagicCookies, TransactionBufferLengthInBytes, TransactionIDBuffer, TotalUnknownAttributes, FirstUnknownAttribute, MappedAddressIP, AlternateServerIP, Username, Password, Realm, Nonce, Software, CredentialMechanism, MessageIntegrityMessageLengthInBytes, MessageIntegrityBufferSizeInBytes, MessageIntegrityBuffer, FingerprintIncluded, ChannelNumber, LifetimeIncluded, Lifetime, PeerAddressListSize, FirstPeerAddress, RelayAddressIP, DataLengthInBytes, EvenPortIncluded, EvenPort, RequestTransport, DontFragementIncluded, ReservationTokenIncluded, ReservationTokenSizeInBytes, ReservationToken, MobilityTicketIncluded, MobilityTicketBufferSizeInBytes, MobilityTicketBuffer, PriorityIncluded, Priority, UseCandidateIncluded, IceControlledIncluded, IceControlled, IceControllingIncluded, IceControlling, NextSequenceNumber, MinimumRTTIncluded, MinimumRTT, ConnectionInfo, GSNR, GSNFR, ReliabilityFlagsIncluded, ReliabilityFlags, ACKVectorLengthInBytes, AckVectorBuffer, LocalCongestionControl, RemoteCongestionControl)\
        EventEnabledOpServicesStunPacket() ?\
        Template_sssxxxxhsqqbxhsssssssxxqbthtqxssxttcttqbtqbtqttxtxxtqsxxttqbxx(OrtcServicesHandle, &OpServicesStunPacket, Method, Message, Log, ObjectID, StunClass, StunMethod, TotalRetries, ErrorCode, Reason, MagicCookies, TransactionBufferLengthInBytes, TransactionIDBuffer, TotalUnknownAttributes, FirstUnknownAttribute, MappedAddressIP, AlternateServerIP, Username, Password, Realm, Nonce, Software, CredentialMechanism, MessageIntegrityMessageLengthInBytes, MessageIntegrityBufferSizeInBytes, MessageIntegrityBuffer, FingerprintIncluded, ChannelNumber, LifetimeIncluded, Lifetime, PeerAddressListSize, FirstPeerAddress, RelayAddressIP, DataLengthInBytes, EvenPortIncluded, EvenPort, RequestTransport, DontFragementIncluded, ReservationTokenIncluded, ReservationTokenSizeInBytes, ReservationToken, MobilityTicketIncluded, MobilityTicketBufferSizeInBytes, MobilityTicketBuffer, PriorityIncluded, Priority, UseCandidateIncluded, IceControlledIncluded, IceControlled, IceControllingIncluded, IceControlling, NextSequenceNumber, MinimumRTTIncluded, MinimumRTT, ConnectionInfo, GSNR, GSNFR, ReliabilityFlagsIncluded, ReliabilityFlags, ACKVectorLengthInBytes, AckVectorBuffer, LocalCongestionControl, RemoteCongestionControl)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OpServicesStunRequesterCreate
//

#define EventEnabledOpServicesStunRequesterCreate() ((OrtcServicesEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for OpServicesStunRequesterCreate
//
#define EventWriteOpServicesStunRequesterCreate(Method, ObjectID, ServerIP, UsingRFC, BackOffTimerPatternObjectID)\
        EventEnabledOpServicesStunRequesterCreate() ?\
        Template_sxsxx(OrtcServicesHandle, &OpServicesStunRequesterCreate, Method, ObjectID, ServerIP, UsingRFC, BackOffTimerPatternObjectID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OpServicesStunRequesterDestroy
//

#define EventEnabledOpServicesStunRequesterDestroy() ((OrtcServicesEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for OpServicesStunRequesterDestroy
//
#define EventWriteOpServicesStunRequesterDestroy(Method, ObjectID)\
        EventEnabledOpServicesStunRequesterDestroy() ?\
        Template_sx(OrtcServicesHandle, &OpServicesStunRequesterDestroy, Method, ObjectID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OpServicesStunRequesterCancel
//

#define EventEnabledOpServicesStunRequesterCancel() ((OrtcServicesEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for OpServicesStunRequesterCancel
//
#define EventWriteOpServicesStunRequesterCancel(Method, ObjectID)\
        EventEnabledOpServicesStunRequesterCancel() ?\
        Template_sx(OrtcServicesHandle, &OpServicesStunRequesterCancel, Method, ObjectID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OpServicesStunRequesterRetryNow
//

#define EventEnabledOpServicesStunRequesterRetryNow() ((OrtcServicesEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for OpServicesStunRequesterRetryNow
//
#define EventWriteOpServicesStunRequesterRetryNow(Method, ObjectID)\
        EventEnabledOpServicesStunRequesterRetryNow() ?\
        Template_sx(OrtcServicesHandle, &OpServicesStunRequesterRetryNow, Method, ObjectID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OpServicesStunRequesterReceivedStunPacket
//

#define EventEnabledOpServicesStunRequesterReceivedStunPacket() ((OrtcServicesEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for OpServicesStunRequesterReceivedStunPacket
//
#define EventWriteOpServicesStunRequesterReceivedStunPacket(Method, ObjectID, FromIP)\
        EventEnabledOpServicesStunRequesterReceivedStunPacket() ?\
        Template_sxs(OrtcServicesHandle, &OpServicesStunRequesterReceivedStunPacket, Method, ObjectID, FromIP)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OpServicesStunRequesterBackOffTimerStateEventFired
//

#define EventEnabledOpServicesStunRequesterBackOffTimerStateEventFired() ((OrtcServicesEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for OpServicesStunRequesterBackOffTimerStateEventFired
//
#define EventWriteOpServicesStunRequesterBackOffTimerStateEventFired(Method, ObjectID, BackOffTimerObjectID, State, TotalTries)\
        EventEnabledOpServicesStunRequesterBackOffTimerStateEventFired() ?\
        Template_sxxsx(OrtcServicesHandle, &OpServicesStunRequesterBackOffTimerStateEventFired, Method, ObjectID, BackOffTimerObjectID, State, TotalTries)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OpServicesStunRequesterSendPacket
//

#define EventEnabledOpServicesStunRequesterSendPacket() ((OrtcServicesEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for OpServicesStunRequesterSendPacket
//
#define EventWriteOpServicesStunRequesterSendPacket(Method, ObjectID, StunPacketBufferSizeInBytes, StunPacketBuffer)\
        EventEnabledOpServicesStunRequesterSendPacket() ?\
        Template_sxqb(OrtcServicesHandle, &OpServicesStunRequesterSendPacket, Method, ObjectID, StunPacketBufferSizeInBytes, StunPacketBuffer)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OpServicesStunRequesterManagerCreate
//

#define EventEnabledOpServicesStunRequesterManagerCreate() ((OrtcServicesEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for OpServicesStunRequesterManagerCreate
//
#define EventWriteOpServicesStunRequesterManagerCreate(Method, ObjectID)\
        EventEnabledOpServicesStunRequesterManagerCreate() ?\
        Template_sx(OrtcServicesHandle, &OpServicesStunRequesterManagerCreate, Method, ObjectID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OpServicesStunRequesterManagerDestroy
//

#define EventEnabledOpServicesStunRequesterManagerDestroy() ((OrtcServicesEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for OpServicesStunRequesterManagerDestroy
//
#define EventWriteOpServicesStunRequesterManagerDestroy(Method, ObjectID)\
        EventEnabledOpServicesStunRequesterManagerDestroy() ?\
        Template_sx(OrtcServicesHandle, &OpServicesStunRequesterManagerDestroy, Method, ObjectID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for OpServicesStunRequesterManagerReceivedStunPacket
//

#define EventEnabledOpServicesStunRequesterManagerReceivedStunPacket() ((OrtcServicesEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for OpServicesStunRequesterManagerReceivedStunPacket
//
#define EventWriteOpServicesStunRequesterManagerReceivedStunPacket(Method, ObjectID, FromIP)\
        EventEnabledOpServicesStunRequesterManagerReceivedStunPacket() ?\
        Template_sxs(OrtcServicesHandle, &OpServicesStunRequesterManagerReceivedStunPacket, Method, ObjectID, FromIP)\
        : ERROR_SUCCESS\

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION


//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Template Functions 
//
//
//Template from manifest : T_StunPacket
//
#ifndef Template_sssxxxxhsqqbxhsssssssxxqbthtqxssxttcttqbtqbtqttxtxxtqsxxttqbxx_def
#define Template_sssxxxxhsqqbxhsssssssxxqbthtqxssxttcttqbtqbtqttxtxxtqsxxttqbxx_def
ETW_INLINE
ULONG
Template_sssxxxxhsqqbxhsssssssxxqbthtqxssxttcttqbtqbtqttxtxxtqsxxttqbxx(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1,
    _In_opt_ LPCSTR  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ unsigned __int64  _Arg4,
    _In_ unsigned __int64  _Arg5,
    _In_ unsigned __int64  _Arg6,
    _In_ const unsigned short  _Arg7,
    _In_opt_ LPCSTR  _Arg8,
    _In_ const unsigned int  _Arg9,
    _In_ const unsigned int  _Arg10,
    _In_reads_(_Arg10) const BYTE*  _Arg11,
    _In_ unsigned __int64  _Arg12,
    _In_ const unsigned short  _Arg13,
    _In_opt_ LPCSTR  _Arg14,
    _In_opt_ LPCSTR  _Arg15,
    _In_opt_ LPCSTR  _Arg16,
    _In_opt_ LPCSTR  _Arg17,
    _In_opt_ LPCSTR  _Arg18,
    _In_opt_ LPCSTR  _Arg19,
    _In_opt_ LPCSTR  _Arg20,
    _In_ unsigned __int64  _Arg21,
    _In_ unsigned __int64  _Arg22,
    _In_ const unsigned int  _Arg23,
    _In_reads_(_Arg23) const BYTE*  _Arg24,
    _In_ const BOOL  _Arg25,
    _In_ const unsigned short  _Arg26,
    _In_ const BOOL  _Arg27,
    _In_ const unsigned int  _Arg28,
    _In_ unsigned __int64  _Arg29,
    _In_opt_ LPCSTR  _Arg30,
    _In_opt_ LPCSTR  _Arg31,
    _In_ unsigned __int64  _Arg32,
    _In_ const BOOL  _Arg33,
    _In_ const BOOL  _Arg34,
    _In_ const UCHAR  _Arg35,
    _In_ const BOOL  _Arg36,
    _In_ const BOOL  _Arg37,
    _In_ const unsigned int  _Arg38,
    _In_reads_(_Arg38) const BYTE*  _Arg39,
    _In_ const BOOL  _Arg40,
    _In_ const unsigned int  _Arg41,
    _In_reads_(_Arg41) const BYTE*  _Arg42,
    _In_ const BOOL  _Arg43,
    _In_ const unsigned int  _Arg44,
    _In_ const BOOL  _Arg45,
    _In_ const BOOL  _Arg46,
    _In_ unsigned __int64  _Arg47,
    _In_ const BOOL  _Arg48,
    _In_ unsigned __int64  _Arg49,
    _In_ unsigned __int64  _Arg50,
    _In_ const BOOL  _Arg51,
    _In_ const unsigned int  _Arg52,
    _In_opt_ LPCSTR  _Arg53,
    _In_ unsigned __int64  _Arg54,
    _In_ unsigned __int64  _Arg55,
    _In_ const BOOL  _Arg56,
    _In_ const BOOL  _Arg57,
    _In_ const unsigned int  _Arg58,
    _In_reads_(_Arg58) const BYTE*  _Arg59,
    _In_ unsigned __int64  _Arg60,
    _In_ unsigned __int64  _Arg61
    )
{
#define ARGUMENT_COUNT_sssxxxxhsqqbxhsssssssxxqbthtqxssxttcttqbtqbtqttxtxxtqsxxttqbxx 62

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_sssxxxxhsqqbxhsssssssxxqbthtqxssxttcttqbtqbtqttxtxxtqsxxttqbxx];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[5], &_Arg5, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[6], &_Arg6, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[7], &_Arg7, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[8], 
                        (_Arg8 != NULL) ? _Arg8 : "NULL",
                        (_Arg8 != NULL) ? (ULONG)((strlen(_Arg8) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[9], &_Arg9, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[10], &_Arg10, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[11], _Arg11, (ULONG)sizeof(char)*_Arg10);

    EventDataDescCreate(&EventData[12], &_Arg12, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[13], &_Arg13, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[14], 
                        (_Arg14 != NULL) ? _Arg14 : "NULL",
                        (_Arg14 != NULL) ? (ULONG)((strlen(_Arg14) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[15], 
                        (_Arg15 != NULL) ? _Arg15 : "NULL",
                        (_Arg15 != NULL) ? (ULONG)((strlen(_Arg15) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[16], 
                        (_Arg16 != NULL) ? _Arg16 : "NULL",
                        (_Arg16 != NULL) ? (ULONG)((strlen(_Arg16) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[17], 
                        (_Arg17 != NULL) ? _Arg17 : "NULL",
                        (_Arg17 != NULL) ? (ULONG)((strlen(_Arg17) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[18], 
                        (_Arg18 != NULL) ? _Arg18 : "NULL",
                        (_Arg18 != NULL) ? (ULONG)((strlen(_Arg18) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[19], 
                        (_Arg19 != NULL) ? _Arg19 : "NULL",
                        (_Arg19 != NULL) ? (ULONG)((strlen(_Arg19) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[20], 
                        (_Arg20 != NULL) ? _Arg20 : "NULL",
                        (_Arg20 != NULL) ? (ULONG)((strlen(_Arg20) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[21], &_Arg21, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[22], &_Arg22, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[23], &_Arg23, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[24], _Arg24, (ULONG)sizeof(char)*_Arg23);

    EventDataDescCreate(&EventData[25], &_Arg25, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[26], &_Arg26, sizeof(const unsigned short)  );

    EventDataDescCreate(&EventData[27], &_Arg27, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[28], &_Arg28, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[29], &_Arg29, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[30], 
                        (_Arg30 != NULL) ? _Arg30 : "NULL",
                        (_Arg30 != NULL) ? (ULONG)((strlen(_Arg30) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[31], 
                        (_Arg31 != NULL) ? _Arg31 : "NULL",
                        (_Arg31 != NULL) ? (ULONG)((strlen(_Arg31) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[32], &_Arg32, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[33], &_Arg33, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[34], &_Arg34, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[35], &_Arg35, sizeof(const UCHAR)  );

    EventDataDescCreate(&EventData[36], &_Arg36, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[37], &_Arg37, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[38], &_Arg38, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[39], _Arg39, (ULONG)sizeof(char)*_Arg38);

    EventDataDescCreate(&EventData[40], &_Arg40, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[41], &_Arg41, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[42], _Arg42, (ULONG)sizeof(char)*_Arg41);

    EventDataDescCreate(&EventData[43], &_Arg43, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[44], &_Arg44, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[45], &_Arg45, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[46], &_Arg46, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[47], &_Arg47, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[48], &_Arg48, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[49], &_Arg49, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[50], &_Arg50, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[51], &_Arg51, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[52], &_Arg52, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[53], 
                        (_Arg53 != NULL) ? _Arg53 : "NULL",
                        (_Arg53 != NULL) ? (ULONG)((strlen(_Arg53) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[54], &_Arg54, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[55], &_Arg55, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[56], &_Arg56, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[57], &_Arg57, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[58], &_Arg58, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[59], _Arg59, (ULONG)sizeof(char)*_Arg58);

    EventDataDescCreate(&EventData[60], &_Arg60, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[61], &_Arg61, sizeof(unsigned __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_sssxxxxhsqqbxhsssssssxxqbthtqxssxttcttqbtqbtqttxtxxtqsxxttqbxx, EventData);
}
#endif

//
//Template from manifest : T_StunRequesterCreate
//
#ifndef Template_sxsxx_def
#define Template_sxsxx_def
ETW_INLINE
ULONG
Template_sxsxx(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_opt_ LPCSTR  _Arg2,
    _In_ unsigned __int64  _Arg3,
    _In_ unsigned __int64  _Arg4
    )
{
#define ARGUMENT_COUNT_sxsxx 5

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_sxsxx];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(unsigned __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_sxsxx, EventData);
}
#endif

//
//Template from manifest : T_BasicObject
//
#ifndef Template_sx_def
#define Template_sx_def
ETW_INLINE
ULONG
Template_sx(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_ unsigned __int64  _Arg1
    )
{
#define ARGUMENT_COUNT_sx 2

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_sx];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_sx, EventData);
}
#endif

//
//Template from manifest : T_BasicObjectWithFromIP
//
#ifndef Template_sxs_def
#define Template_sxs_def
ETW_INLINE
ULONG
Template_sxs(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_opt_ LPCSTR  _Arg2
    )
{
#define ARGUMENT_COUNT_sxs 3

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_sxs];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_sxs, EventData);
}
#endif

//
//Template from manifest : T_StunRequesterBackOffTimerStateEventFired
//
#ifndef Template_sxxsx_def
#define Template_sxxsx_def
ETW_INLINE
ULONG
Template_sxxsx(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ unsigned __int64  _Arg2,
    _In_opt_ LPCSTR  _Arg3,
    _In_ unsigned __int64  _Arg4
    )
{
#define ARGUMENT_COUNT_sxxsx 5

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_sxxsx];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[3], 
                        (_Arg3 != NULL) ? _Arg3 : "NULL",
                        (_Arg3 != NULL) ? (ULONG)((strlen(_Arg3) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[4], &_Arg4, sizeof(unsigned __int64)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_sxxsx, EventData);
}
#endif

//
//Template from manifest : T_StunRequesterSendPacket
//
#ifndef Template_sxqb_def
#define Template_sxqb_def
ETW_INLINE
ULONG
Template_sxqb(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_reads_(_Arg2) const BYTE*  _Arg3
    )
{
#define ARGUMENT_COUNT_sxqb 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_sxqb];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], _Arg3, (ULONG)sizeof(char)*_Arg2);

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_sxqb, EventData);
}
#endif

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#if defined(__cplusplus)
};
#endif

#define MSG_Opcode_Cancel                    0x30000065L
#define MSG_Opcode_InternalEvent             0x30000066L
#define MSG_Opcode_StunRequester_RetryNow    0x3002000BL
#define MSG_level_Informational              0x50000004L
#define MSG_level_Verbose                    0x50000005L
#define MSG_Task_Stun                        0x70000001L
#define MSG_Task_StunRequester               0x70000002L
#define MSG_Task_StunRequesterManager        0x70000003L
#define MSG_Task_StunDiscovery               0x70000004L
#define MSG_Task_TurnSocket                  0x70000005L
#define MSG_Task_BackOffTimerPattern         0x70000006L
#define MSG_Task_BackOffTimer                0x70000007L
#define MSG_Task_Settings                    0x70000008L
#define MSG_Task_Cache                       0x70000009L
#define MSG_Task_Dns                         0x7000000AL
#define MSG_Task_Http                        0x7000000BL
#define MSG_Task_DebugLogger                 0x7000000CL
#define MSG_OrtcServices_ProviderMessage     0x90000001L
#define MSG_Channel_OrtcServicesDebug        0x90000002L
#define MSG_Event_OpServicesStunPacket       0xB00003E9L
#define MSG_Event_OpServicesStunRequesterCreate 0xB000044DL
#define MSG_Event_OpServicesStunRequesterDestroy 0xB000044EL
#define MSG_Event_OpServicesStunRequesterCancel 0xB000044FL
#define MSG_Event_OpServicesStunRequesterRetryNow 0xB0000450L
#define MSG_Event_OpServicesStunRequesterReceivedStunPacket 0xB0000451L
#define MSG_Event_OpServicesStunRequesterBackOffTimerStateEventFired 0xB0000452L
#define MSG_Event_OpServicesStunRequesterSendPacket 0xB0000453L
#define MSG_Event_OpServicesStunRequesterManagerCreate 0xB00004B1L
#define MSG_Event_OpServicesStunRequesterManagerDestroy 0xB00004B2L
#define MSG_Event_OpServicesStunRequesterManagerReceivedStunPacket 0xB00004B3L
