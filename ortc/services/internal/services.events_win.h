// Generated by zsLibEventingTool

#pragma once

#include <zsLib/eventing/noop.h>

#ifndef _WIN32

#include "services.events.h"

#else

#include "services.events_win_etw.h"
#include <stdint.h>
#include <zsLib/eventing/Log.h>

namespace zsLib {
  namespace eventing {

#define ZS_INTERNAL_REGISTER_EVENTING_OrtcServices() EventRegisterOrtcServices()
#define ZS_INTERNAL_UNREGISTER_EVENTING_OrtcServices() EventUnregisterOrtcServices()

#define ZS_INTERNAL_EVENTING_EVENT_EventWriteOpServicesStunRequesterManagerDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteEventWriteOpServicesStunRequesterManagerDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerCreate(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteServicesBackOffTimerCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteServicesBackOffTimerDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerNotifyAttemptFailed(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesBackOffTimerNotifyAttemptFailed((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerNotifyAttempting(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesBackOffTimerNotifyAttempting((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerNotifySucceeded(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesBackOffTimerNotifySucceeded((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerNotifyTryAgainNow(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesBackOffTimerNotifyTryAgainNow((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerPatternClone(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesBackOffTimerPatternClone((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerPatternCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesBackOffTimerPatternCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<int64_t>(xValue4), static_cast<double>(xValue5), static_cast<int64_t>(xValue6), static_cast<int64_t>(xValue7), static_cast<double>(xValue8), static_cast<int64_t>(xValue9)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerPatternDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesBackOffTimerPatternDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerPatternNextAttempt(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesBackOffTimerPatternNextAttempt((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<int64_t>(xValue3), static_cast<int64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerStateChangedEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesBackOffTimerStateChangedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesCacheClear(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesCacheClear((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesCacheFetch(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesCacheFetch((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesCacheFetchNoDelegate(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesCacheFetchNoDelegate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesCacheStore(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesCacheStore((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<int64_t>(xValue3), (xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesDebugLogger(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesDebugLogger((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), (xValue2), (xValue3), (xValue4), (xValue5), static_cast<uint64_t>(xValue6), (xValue7)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsLookup(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesDnsLookup((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsLookupCompleteEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesDnsLookupCompleteEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsLookupFailedEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesDnsLookupFailedEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsLookupResolverSubQuery(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesDnsLookupResolverSubQuery((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), static_cast<uint64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsLookupSuccessEvent(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesDnsLookupSuccessEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsResultListBegin(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesDnsResultListBegin((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), (xValue2), static_cast<uint32_t>(xValue3), static_cast<uint64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsResultListEnd(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesDnsResultListEnd((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsResultListEntry(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesDnsResultListEntry((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), (xValue2), static_cast<uint32_t>(xValue3), (xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsSrvLookup(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesDnsSrvLookup((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), static_cast<uint16_t>(xValue4), static_cast<uint16_t>(xValue5), static_cast<uint16_t>(xValue6), static_cast<uint64_t>(xValue7)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsSrvResultListBegin(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesDnsSrvResultListBegin((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), (xValue2), (xValue3), (xValue4), static_cast<uint32_t>(xValue5), static_cast<uint64_t>(xValue6)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsSrvResultListEnd(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesDnsSrvResultListEnd((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsSrvResultListEntryBegin(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesDnsSrvResultListEntryBegin((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), (xValue2), static_cast<uint16_t>(xValue3), static_cast<uint16_t>(xValue4), static_cast<uint16_t>(xValue5), static_cast<uint64_t>(xValue6), static_cast<uint64_t>(xValue7)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesHttpQueryCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesHttpQueryCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesHttpQueryCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesHttpQueryCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (bool)(xValue2), (xValue3), (xValue4), static_cast<size_t>(xValue6), reinterpret_cast<const BYTE *>(xValue5), (xValue7), static_cast<int64_t>(xValue8)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesHttpQueryDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesHttpQueryDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesHttpQueryRead(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesHttpQueryRead((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesHttpQueryReadAsString(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesHttpQueryReadAsString((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesHttpQueryReadHeader(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesHttpQueryReadHeader((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesHttpQueryReadHeaderAsString(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesHttpQueryReadHeaderAsString((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingApply(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingApply((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingApplyDefaults(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingApplyDefaults((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingClear(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingClear((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingClearAll(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingClearAll((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingGetBool(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingGetBool((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (bool)(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingGetDouble(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingGetDouble((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<double>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingGetFloat(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingGetFloat((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<float>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingGetInt(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingGetInt((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<int64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingGetString(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingGetString((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingGetUInt(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingGetUInt((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingSetBool(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingSetBool((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (bool)(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingSetDouble(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingSetDouble((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<float>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingSetFloat(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingSetFloat((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<float>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingSetInt(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingSetInt((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<int64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingSetString(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingSetString((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingSetUInt(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingSetUInt((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingVerifyExists(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesSettingVerifyExists((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (bool)(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingVerifyExistsFailed(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Basic)) { EventWriteServicesSettingVerifyExistsFailed((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (bool)(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesStunDiscoveryCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryError(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesStunDiscoveryError((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint16_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryErrorTimeout(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesStunDiscoveryErrorTimeout((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryErrorUseAlternativeServer(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesStunDiscoveryErrorUseAlternativeServer((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryFoundMappedAddress(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesStunDiscoveryFoundMappedAddress((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), (xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryInternalTimerEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesStunDiscoveryInternalTimerEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryLookupSrv(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesStunDiscoveryLookupSrv((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), (xValue4), (xValue5), static_cast<uint16_t>(xValue6), static_cast<uint16_t>(xValue7), static_cast<uint16_t>(xValue8), static_cast<uint64_t>(xValue9)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryReceivedResponsePacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesStunDiscoveryReceivedResponsePacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryRequestCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesStunDiscoveryRequestCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryRequestSendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesStunDiscoveryRequestSendPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunIcePacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20, xValue21, xValue22, xValue23, xValue24, xValue25, xValue26, xValue27, xValue28, xValue29, xValue30, xValue31, xValue32) if (ZS_EVENTING_IS_LOGGING(Insane)) { EventWriteServicesStunIcePacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), (xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), static_cast<uint64_t>(xValue5), static_cast<uint64_t>(xValue6), static_cast<uint16_t>(xValue7), (xValue8), static_cast<uint32_t>(xValue9), static_cast<size_t>(xValue11), reinterpret_cast<const BYTE *>(xValue10), static_cast<uint64_t>(xValue12), static_cast<uint16_t>(xValue13), (xValue14), (xValue15), (xValue16), (xValue17), (xValue18), (xValue19), (xValue20), static_cast<uint64_t>(xValue21), static_cast<uint64_t>(xValue22), static_cast<size_t>(xValue24), reinterpret_cast<const BYTE *>(xValue23), (bool)(xValue25), (bool)(xValue26), static_cast<uint32_t>(xValue27), (bool)(xValue28), (bool)(xValue29), static_cast<uint64_t>(xValue30), (bool)(xValue31), static_cast<uint64_t>(xValue32)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20, xValue21, xValue22, xValue23, xValue24, xValue25) if (ZS_EVENTING_IS_LOGGING(Insane)) { EventWriteServicesStunPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), (xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), static_cast<uint64_t>(xValue5), static_cast<uint64_t>(xValue6), static_cast<uint16_t>(xValue7), (xValue8), static_cast<uint32_t>(xValue9), static_cast<size_t>(xValue11), reinterpret_cast<const BYTE *>(xValue10), static_cast<uint64_t>(xValue12), static_cast<uint16_t>(xValue13), (xValue14), (xValue15), (xValue16), (xValue17), (xValue18), (xValue19), (xValue20), static_cast<uint64_t>(xValue21), static_cast<uint64_t>(xValue22), static_cast<size_t>(xValue24), reinterpret_cast<const BYTE *>(xValue23), (bool)(xValue25)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterBackOffTimerStateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesStunRequesterBackOffTimerStateEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), static_cast<uint64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesStunRequesterCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesStunRequesterCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesStunRequesterDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterManagerCreate(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteServicesStunRequesterManagerCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterManagerMonitorStart(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteServicesStunRequesterManagerMonitorStart((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterManagerReceivedStunPacket(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteServicesStunRequesterManagerReceivedStunPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterReceivedStunPacket(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesStunRequesterReceivedStunPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterRetryNow(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesStunRequesterRetryNow((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterSendPacket(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesStunRequesterSendPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<size_t>(xValue3), reinterpret_cast<const BYTE *>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRudpPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20, xValue21, xValue22, xValue23, xValue24, xValue25, xValue26, xValue27, xValue28, xValue29, xValue30, xValue31, xValue32, xValue33, xValue34, xValue35, xValue36, xValue37) if (ZS_EVENTING_IS_LOGGING(Insane)) { EventWriteServicesStunRudpPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), (xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), static_cast<uint64_t>(xValue5), static_cast<uint64_t>(xValue6), static_cast<uint16_t>(xValue7), (xValue8), static_cast<uint32_t>(xValue9), static_cast<size_t>(xValue11), reinterpret_cast<const BYTE *>(xValue10), static_cast<uint64_t>(xValue12), static_cast<uint16_t>(xValue13), (xValue14), (xValue15), (xValue16), (xValue17), (xValue18), (xValue19), (xValue20), static_cast<uint64_t>(xValue21), static_cast<uint64_t>(xValue22), static_cast<size_t>(xValue24), reinterpret_cast<const BYTE *>(xValue23), (bool)(xValue25), static_cast<uint64_t>(xValue26), (bool)(xValue27), static_cast<uint32_t>(xValue28), (xValue29), static_cast<uint64_t>(xValue30), static_cast<uint64_t>(xValue31), (bool)(xValue32), static_cast<uint8_t>(xValue33), static_cast<size_t>(xValue35), reinterpret_cast<const BYTE *>(xValue34), static_cast<uint64_t>(xValue36), static_cast<uint64_t>(xValue37)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunTurnPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20, xValue21, xValue22, xValue23, xValue24, xValue25, xValue26, xValue27, xValue28, xValue29, xValue30, xValue31, xValue32, xValue33, xValue34, xValue35, xValue36, xValue37, xValue38, xValue39, xValue40, xValue41, xValue42) if (ZS_EVENTING_IS_LOGGING(Insane)) { EventWriteServicesStunTurnPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, (xValue1), (xValue2), static_cast<uint64_t>(xValue3), static_cast<uint64_t>(xValue4), static_cast<uint64_t>(xValue5), static_cast<uint64_t>(xValue6), static_cast<uint16_t>(xValue7), (xValue8), static_cast<uint32_t>(xValue9), static_cast<size_t>(xValue11), reinterpret_cast<const BYTE *>(xValue10), static_cast<uint64_t>(xValue12), static_cast<uint16_t>(xValue13), (xValue14), (xValue15), (xValue16), (xValue17), (xValue18), (xValue19), (xValue20), static_cast<uint64_t>(xValue21), static_cast<uint64_t>(xValue22), static_cast<size_t>(xValue24), reinterpret_cast<const BYTE *>(xValue23), (bool)(xValue25), static_cast<uint16_t>(xValue26), (bool)(xValue27), static_cast<uint32_t>(xValue28), static_cast<uint64_t>(xValue29), (xValue30), (xValue31), static_cast<uint64_t>(xValue32), (bool)(xValue33), (bool)(xValue34), static_cast<uint8_t>(xValue35), (bool)(xValue36), (bool)(xValue37), static_cast<size_t>(xValue39), reinterpret_cast<const BYTE *>(xValue38), (bool)(xValue40), static_cast<size_t>(xValue42), reinterpret_cast<const BYTE *>(xValue41)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketCancel(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesTurnSocketCancel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteServicesTurnSocketCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (xValue3), (xValue4), static_cast<uint64_t>(xValue5), (bool)(xValue6), static_cast<uint16_t>(xValue7), static_cast<uint16_t>(xValue8)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteServicesTurnSocketDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInstallChannelWake(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesTurnSocketInstallChannelWake((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<uint16_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInstallPermissionWake(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesTurnSocketInstallPermissionWake((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalBackgroundingApplicationWillQuitEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteServicesTurnSocketInternalBackgroundingApplicationWillQuitEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalBackgroundingNowEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteServicesTurnSocketInternalBackgroundingNowEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalGoingToBackgroundingEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteServicesTurnSocketInternalGoingToBackgroundingEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalRequesterTimedOutEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesTurnSocketInternalRequesterTimedOutEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalReturnFromBackgroundEvent(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteServicesTurnSocketInternalReturnFromBackgroundEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalSocketExceptionEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesTurnSocketInternalSocketExceptionEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalSocketReadReadyEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesTurnSocketInternalSocketReadReadyEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalSocketWriteReadyEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesTurnSocketInternalSocketWriteReadyEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalTimerEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesTurnSocketInternalTimerEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketReceivedChannelData(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesTurnSocketReceivedChannelData((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketReceivedStunPacketData(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesTurnSocketReceivedStunPacketData((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketRequesterCreate(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesTurnSocketRequesterCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketRequesterCreateReauth(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesTurnSocketRequesterCreateReauth((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), static_cast<uint64_t>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketRequesterReceivedStunResponse(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesTurnSocketRequesterReceivedStunResponse((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketRequesterSendStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesTurnSocketRequesterSendStunPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2), (xValue3), static_cast<size_t>(xValue5), reinterpret_cast<const BYTE *>(xValue4)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketSendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesTurnSocketSendPacket((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3), (bool)(xValue5)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketSendPacketViaStun(xSubsystem, xValue1, xValue2, xValue3, xValue4) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWriteServicesTurnSocketSendPacketViaStun((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketStateEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteServicesTurnSocketStateEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketUseNextServer(xSubsystem, xValue1, xValue2, xValue3) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteServicesTurnSocketUseNextServer((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), (bool)(xValue3)); }
#define ZS_INTERNAL_EVENTING_EVENT_StunDiscoveryCreate(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteStunDiscoveryCreate((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<int64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_StunDiscoveryDestroy(xSubsystem, xValue1) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteStunDiscoveryDestroy((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1)); }
#define ZS_INTERNAL_EVENTING_EVENT_StunDiscoveryInternalLookupCompleteEvent(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Debug)) { EventWriteStunDiscoveryInternalLookupCompleteEvent((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_StunRequesterManagerMonitorStop(xSubsystem, xValue1, xValue2) if (ZS_EVENTING_IS_LOGGING(Detail)) { EventWriteStunRequesterManagerMonitorStop((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), static_cast<uint64_t>(xValue2)); }
#define ZS_INTERNAL_EVENTING_EVENT_pServicesTurnSocketSendPacketViaChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) if (ZS_EVENTING_IS_LOGGING(Trace)) { EventWritepServicesTurnSocketSendPacketViaChannel((ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, static_cast<uint64_t>(xValue1), (xValue2), static_cast<size_t>(xValue4), reinterpret_cast<const BYTE *>(xValue3), static_cast<uint16_t>(xValue5)); }

  } // namespace eventing
} // namespace zsLib

#endif // _WIN32

