// Generated by zsLibEventingTool

#pragma once

#include <zsLib/eventing/noop.h>
#ifdef _WIN32

#include "services.events_win.h"

#else

#include <zsLib/eventing/Log.h>
#include <stdint.h>

namespace zsLib {
  namespace eventing {

    template <typename TWriteType>
    void eventWriteBuffer(BYTE * &p, TWriteType value)
    {
      memcpy(&p, &value, sizeof(value));
      p += sizeof(value);
    }
    inline void eventWriteBuffer(BYTE ** &p, const BYTE *buffer, size_t * &bufferSizes, size_t size)
    {
      (*p) = const_cast<BYTE *>(buffer);
      (*bufferSizes) = size;
      ++p;
      ++bufferSizes;
    }
    inline void eventWriteBuffer(BYTE ** &p, const char *str, size_t * &bufferSizes)
    {
      (*p) = const_cast<BYTE *>(reinterpret_cast<const BYTE *>(str));
      (*bufferSizes) = (NULL == str ? 0 : strlen(str)) * sizeof(char);
      ++p;
      ++bufferSizes;
    }
    inline void eventWriteBuffer(const BYTE ** &p, const wchar_t *str, size_t * &bufferSizes)
    {
      (*p) = reinterpret_cast<const BYTE *>(str);
      (*bufferSizes) = (NULL == str ? 0 : wcslen(str)) * sizeof(wchar_t);
      ++p;
      ++bufferSizes;
    }


    inline uintptr_t &getEventHandleOrtcServices()
    {
      static uintptr_t gHandle {};
      return gHandle;
    }

#define ZS_INTERNAL_REGISTER_EVENTING_OrtcServices() ZS_EVENTING_REGISTER_EVENT_WRITER(zsLib::eventing::getEventHandleOrtcServices(), "48da0f57-3fd5-4f85-a9c2-7075b268ac3f", "OrtcServices", "36a99a8b40910215745d33c8decddacd688ebaad1177df0b417312575a2a7dd3")
#define ZS_INTERNAL_UNREGISTER_EVENTING_OrtcServices() ZS_EVENTING_UNREGISTER_EVENT_WRITER(zsLib::eventing::getEventHandleOrtcServices())


#define ZS_INTERNAL_EVENTING_EVENT_EventWriteOpServicesStunRequesterManagerDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1000, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerCreate(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1001, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1002, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerNotifyAttemptFailed(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Warning, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1003, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerNotifyAttempting(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1004, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerNotifySucceeded(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1005, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerNotifyTryAgainNow(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1006, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerPatternClone(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1007, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerPatternCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[88]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<double>(xxPOutputBuffer, static_cast<double>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<double>(xxPOutputBuffer, static_cast<double>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue9)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1008, &(xxOutputBuffer[0]), 88); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerPatternDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1009, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerPatternNextAttempt(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[32]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1010, &(xxOutputBuffer[0]), 32); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesBackOffTimerStateChangedEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1011, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesCacheClear(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1012, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesCacheFetch(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1013, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesCacheFetchNoDelegate(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Warning, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1014, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesCacheStore(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1015, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesDebugLogger(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[6]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[6]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue7), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1016, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 6); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsLookup(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1017, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsLookupCompleteEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1018, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsLookupFailedEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Error, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1019, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsLookupResolverSubQuery(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1020, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsLookupSuccessEvent(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1021, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsResultListBegin(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[12]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1022, &(xxOutputBuffer[0]), 12, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsResultListEnd(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1023, NULL, 0, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsResultListEntry(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[4]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[3]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[3]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1024, &(xxOutputBuffer[0]), 4, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 3); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsSrvLookup(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[22]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1025, &(xxOutputBuffer[0]), 22, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsSrvResultListBegin(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[12]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[4]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[4]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1026, &(xxOutputBuffer[0]), 12, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 4); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsSrvResultListEnd(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1027, NULL, 0, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesDnsSrvResultListEntryBegin(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[22]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue7)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1028, &(xxOutputBuffer[0]), 22, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesHttpQueryCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1029, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesHttpQueryCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[4]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[4]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue5), xxPIndirectSize, (xValue6)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue7), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue8)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1030, &(xxOutputBuffer[0]), 9, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 4); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesHttpQueryDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1031, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesHttpQueryRead(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1032, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesHttpQueryReadAsString(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1033, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesHttpQueryReadHeader(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1034, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesHttpQueryReadHeaderAsString(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1035, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingApply(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1036, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingApplyDefaults(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1037, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingClear(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1038, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingClearAll(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1039, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingGetBool(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1040, &(xxOutputBuffer[0]), 9, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingGetDouble(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<double>(xxPOutputBuffer, static_cast<double>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1041, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingGetFloat(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[12]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<float>(xxPOutputBuffer, static_cast<float>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1042, &(xxOutputBuffer[0]), 12, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingGetInt(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1043, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingGetString(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1044, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingGetUInt(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1045, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingSetBool(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1046, &(xxOutputBuffer[0]), 9, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingSetDouble(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[12]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<float>(xxPOutputBuffer, static_cast<float>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1047, &(xxOutputBuffer[0]), 12, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingSetFloat(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[12]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<float>(xxPOutputBuffer, static_cast<float>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1048, &(xxOutputBuffer[0]), 12, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingSetInt(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1049, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingSetString(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1050, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingSetUInt(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1051, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingVerifyExists(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1052, &(xxOutputBuffer[0]), 9, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesSettingVerifyExistsFailed(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Basic)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Warning, Basic, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1053, &(xxOutputBuffer[0]), 9, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1054, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryError(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[18]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Error, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1055, &(xxOutputBuffer[0]), 18); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryErrorTimeout(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Error, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1056, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryErrorUseAlternativeServer(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Warning, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1057, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryFoundMappedAddress(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1058, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryInternalTimerEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1059, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryLookupSrv(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[30]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[3]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[3]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue5), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue8)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue9)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1060, &(xxOutputBuffer[0]), 30, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 3); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryReceivedResponsePacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1061, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryRequestCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1062, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunDiscoveryRequestSendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1063, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunIcePacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20, xValue21, xValue22, xValue23, xValue24, xValue25, xValue26, xValue27, xValue28, xValue29, xValue30, xValue31, xValue32) \
  if (ZS_EVENTING_IS_LOGGING(Insane)) { \
    BYTE xxOutputBuffer[38]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[12]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[12]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue10), xxPIndirectSize, (xValue11)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue13)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue14), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue16), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue17), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue18), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue19), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue20), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue21)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue22)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue23), xxPIndirectSize, (xValue24)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue25)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue26)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue27)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue28)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue29)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue30)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue31)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue32)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Insane, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1064, &(xxOutputBuffer[0]), 38, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 12); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20, xValue21, xValue22, xValue23, xValue24, xValue25) \
  if (ZS_EVENTING_IS_LOGGING(Insane)) { \
    BYTE xxOutputBuffer[38]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[12]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[12]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue10), xxPIndirectSize, (xValue11)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue13)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue14), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue16), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue17), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue18), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue19), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue20), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue21)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue22)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue23), xxPIndirectSize, (xValue24)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue25)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Insane, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1065, &(xxOutputBuffer[0]), 38, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 12); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterBackOffTimerStateEvent(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1066, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1067, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1068, &(xxOutputBuffer[0]), 24, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1069, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterManagerCreate(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1070, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterManagerMonitorStart(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1071, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterManagerReceivedStunPacket(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1072, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterReceivedStunPacket(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1073, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterRetryNow(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1074, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRequesterSendPacket(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue2), xxPIndirectSize, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1075, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunRudpPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20, xValue21, xValue22, xValue23, xValue24, xValue25, xValue26, xValue27, xValue28, xValue29, xValue30, xValue31, xValue32, xValue33, xValue34, xValue35, xValue36, xValue37) \
  if (ZS_EVENTING_IS_LOGGING(Insane)) { \
    BYTE xxOutputBuffer[38]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[14]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[14]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue10), xxPIndirectSize, (xValue11)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue13)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue14), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue16), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue17), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue18), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue19), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue20), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue21)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue22)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue23), xxPIndirectSize, (xValue24)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue25)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue26)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue27)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue28)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue29), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue30)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue31)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue32)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue33)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue34), xxPIndirectSize, (xValue35)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue36)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue37)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Insane, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1076, &(xxOutputBuffer[0]), 38, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 14); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesStunTurnPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8, xValue9, xValue10, xValue11, xValue12, xValue13, xValue14, xValue15, xValue16, xValue17, xValue18, xValue19, xValue20, xValue21, xValue22, xValue23, xValue24, xValue25, xValue26, xValue27, xValue28, xValue29, xValue30, xValue31, xValue32, xValue33, xValue34, xValue35, xValue36, xValue37, xValue38, xValue39, xValue40, xValue41, xValue42) \
  if (ZS_EVENTING_IS_LOGGING(Insane)) { \
    BYTE xxOutputBuffer[38]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[16]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[16]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue1), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue8), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue9)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue10), xxPIndirectSize, (xValue11)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue12)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue13)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue14), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue15), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue16), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue17), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue18), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue19), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue20), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue21)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue22)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue23), xxPIndirectSize, (xValue24)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue25)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue26)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue27)); \
    zsLib::eventing::eventWriteBuffer<uint32_t>(xxPOutputBuffer, static_cast<uint32_t>(xValue28)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue29)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue30), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue31), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue32)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue33)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue34)); \
    zsLib::eventing::eventWriteBuffer<uint8_t>(xxPOutputBuffer, static_cast<uint8_t>(xValue35)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue36)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue37)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue38), xxPIndirectSize, (xValue39)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue40)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue41), xxPIndirectSize, (xValue42)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Insane, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1077, &(xxOutputBuffer[0]), 38, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketCancel(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1078, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketCreate(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5, xValue6, xValue7, xValue8) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[21]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[3]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[3]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue4), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue5)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue6)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue7)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue8)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1079, &(xxOutputBuffer[0]), 21, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 3); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1080, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInstallChannelWake(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[10]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1081, &(xxOutputBuffer[0]), 10, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInstallPermissionWake(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1082, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalBackgroundingApplicationWillQuitEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1083, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalBackgroundingNowEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1084, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalGoingToBackgroundingEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1085, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalRequesterTimedOutEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1086, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalReturnFromBackgroundEvent(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1087, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalSocketExceptionEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Error, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1088, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalSocketReadReadyEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1089, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalSocketWriteReadyEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1090, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketInternalTimerEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1091, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketReceivedChannelData(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1092, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketReceivedStunPacketData(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1093, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketRequesterCreate(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1094, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketRequesterCreateReauth(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[24]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue3)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1095, &(xxOutputBuffer[0]), 24); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketRequesterReceivedStunResponse(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1096, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketRequesterSendStunPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue3), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue4), xxPIndirectSize, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1097, &(xxOutputBuffer[0]), 16, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketSendPacket(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1098, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketSendPacketViaStun(xSubsystem, xValue1, xValue2, xValue3, xValue4) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1099, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketStateEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1100, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_ServicesTurnSocketUseNextServer(xSubsystem, xValue1, xValue2, xValue3) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[9]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[1]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[1]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer<bool>(xxPOutputBuffer, (xValue3)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1101, &(xxOutputBuffer[0]), 9, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 1); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_StunDiscoveryCreate(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<int64_t>(xxPOutputBuffer, static_cast<int64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1102, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_StunDiscoveryDestroy(xSubsystem, xValue1) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1103, &(xxOutputBuffer[0]), 8); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_StunDiscoveryInternalLookupCompleteEvent(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Debug)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Debug, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1104, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_StunRequesterManagerMonitorStop(xSubsystem, xValue1, xValue2) \
  if (ZS_EVENTING_IS_LOGGING(Detail)) { \
    BYTE xxOutputBuffer[16]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue2)); \
    ZS_EVENTING_WRITE_EVENT(zsLib::eventing::getEventHandleOrtcServices(), Informational, Detail, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1105, &(xxOutputBuffer[0]), 16); \
  }

#define ZS_INTERNAL_EVENTING_EVENT_pServicesTurnSocketSendPacketViaChannel(xSubsystem, xValue1, xValue2, xValue3, xValue4, xValue5) \
  if (ZS_EVENTING_IS_LOGGING(Trace)) { \
    BYTE xxOutputBuffer[8]; \
    BYTE *xxPOutputBuffer = &(xxOutputBuffer[0]); \
    BYTE *xxIndirectBuffer[2]; \
    BYTE **xxPIndirectBuffer = &(xxIndirectBuffer[0]); \
    size_t xxIndirectSize[2]; \
    size_t *xxPIndirectSize = &(xxIndirectSize[0]); \
    zsLib::eventing::eventWriteBuffer<uint64_t>(xxPOutputBuffer, static_cast<uint64_t>(xValue1)); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, (xValue2), xxPIndirectSize); \
    zsLib::eventing::eventWriteBuffer(xxPIndirectBuffer, reinterpret_cast<const BYTE *>(xValue3), xxPIndirectSize, (xValue4)); \
    zsLib::eventing::eventWriteBuffer<uint16_t>(xxPOutputBuffer, static_cast<uint16_t>(xValue5)); \
    ZS_EVENTING_WRITE_EVENT_WITH_BUFFERS(zsLib::eventing::getEventHandleOrtcServices(), Informational, Trace, (ZS_GET_SUBSYSTEM()).getName(), __func__, __LINE__, 1106, &(xxOutputBuffer[0]), 8, &(xxIndirectBuffer[0]), &(xxIndirectSize[0]), 2); \
  }

  } // namespace eventing
} // namespace zsLib

#endif // _WIN32

